#!/usr/bin/env python
# coding: utf-8

# ### Simple Linear Regression

# In[13]:


##In this task will predict the percentage of marks that a student is expected to score based upon the number of hours he studied. A simple linear regression task involves two variables.


# In[14]:


#Importing all libraries 
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  


# In[15]:


# Reading data 
URL = "https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv"
data = pd.read_csv(URL)
print("Data imported successfully")

data.head(10)


# ### To plot 2-D Graph

# In[16]:


# Plotting the distribution of scores
data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()


# ### Data Preparation

# In[17]:


X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values  


# ### To split the attributes and labels data into training and test sets

# In[18]:


from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) 


# ### Train the Algorithm
# 

# In[20]:


from sklearn.linear_model import LinearRegression  
reg = LinearRegression()  
reg.fit(X_train, y_train) 

print("Training complete.")


# In[21]:


# Plotting the line of regression
line = reg.coef_*X+reg.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()


# ### Predictions

# In[22]:


print(X_test) # Testing data - In Hours
y_pred = reg.predict(X_test) # Predicting the scores


# In[23]:


# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df 


# In[25]:


# Example data
hours = 9


# In[26]:


own_pred = reg.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))


# ### Evaluation of the model

# In[27]:


from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred)) 

